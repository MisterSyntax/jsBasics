/**
 * Operators: they do stuff
 *  binary - requers 2 operands.
 *      operand1 operator operand2
 *      e.g. 3+4 or x*y;
 *  unary - requires 1 operand before or after the operator
 *      operand operator x++;
 *      operator operand ++x;
 *  Operators are used in expressions
 * Expressions - Unit of code which resolves to a value
 *  -would have at least one operator
 *  -(e.g. 4+3 or x=3;)
 */

/**
 * @Assignment Operator: assigns a value to its left operand based on the value of its right opernad
 */
    Name	                Shorthand operator	Meaning
    Assignment	                x = y	        x = y
    Addition assignment	        x += y	        x = x + y
    Subtraction assignment	    x -= y	        x = x - y
    Multiplication assignment	x *= y	        x = x * y
    Division assignment	        x /= y	        x = x / y
    Remainder assignment	    x %= y	        x = x % y

    Exponentiation assignment	x **= y	        x = x ** y
    //ES7 Proposal

    Left shift assignment	    x <<= y	        x = x << y
    var bar = 5; //  (00000000000000000000000000000101)
    bar <<= 2; // 20 (00000000000000000000000000010100)

    Right shift assignment	    x >>= y	        x = x >> y
    var bar = 5; //   (00000000000000000000000000000101)
    bar >>= 2;   // 1 (00000000000000000000000000000001)


    Unsigned right shift assignment	x >>>= y	x = x >>> y
    var bar = 5; //   (00000000000000000000000000000101)
    bar >>>= 2;  // 1 (00000000000000000000000000000001)

    var bar = -5; // (-00000000000000000000000000000101)
    bar >>>= 2; // 1073741822 (00111111111111111111111111111110)


    Bitwise AND assignment	    x &= y	        x = x & y
    var bar = 5;
    // 5:           00000000000000000000000000000101
    // 6:           00000000000000000000000000000110
    bar &= 6; //4:  00000000000000000000000000000100

    Bitwise XOR assignment	    x ^= y	        x = x ^ y
    var bar = 5;
    bar ^= 2; // 7
    // 5: 00000000000000000000000000000101
    // 6: 00000000000000000000000000000110
    // -----------------------------------
    // 3: 00000000000000000000000000000011


    Bitwise OR assignment	    x |= y	        x = x | y
    var bar = 5;
    bar |= 6; // 7
    // 5: 00000000000000000000000000000101
    // 2: 00000000000000000000000000000110
    // -----------------------------------
    // 7: 00000000000000000000000000000111


    /**
     * @Destructuring Assignments - js expression to extract data from arrays or objects using a syntax that mirrors the construction of array and object literals
     */
    var foo = ['one', 'two', 'three'];

    // without destructuring
    var one   = foo[0];
    var two   = foo[1];
    var three = foo[2];

    // with destructuring
    var [one, two, three] = foo;

/**
 * Comparison Operator: compares its operands and returns a value based on truth
 */

var var1 = 3;
var var2 = 4;

Operator	                 Description	                                            Examples returning true
Equal (==)	                Returns true if the operands are equal.	                    3 == var1 "3" == var1  3 == '3'

Not equal (!=)	            Returns true if the operands are not equal.	                var1 != 4 var2 != "3"

Strict equal (===)	        Returns true if the operands are equal and 
                                of the same type. See also Object.is and 
                                sameness in JS.	                                        3 === var1

Strict not equal (!==)	    Returns true if the operands are of the same 
                             type but not equal, or are of different type.	            var1 !== "3"
3 !== '3'
Greater than (>)	        Returns true if the left operand is greater 
                             than the right operand.	                                var2 > var1     "12" > 2

Greater than or equal (>=)	Returns true if the left operand is greater 
                                than or equal to the right operand.	                    var2 >= var1 var1 >= 3

Less than (<)	            Returns true if the left operand is less 
                                than the right operand.	                                var1 < var2 "2" < 12

Less than or equal (<=)	    Returns true if the left operand is less than 
                                or equal to the right operand.	                        var1 <= var2 var2 <= 5


/**
 * Arithmetic operators - takes numerical values as their operands and returns a single numerical value. 
 *                          Will convert strings to numerical
 */

% - Remainder
++ - Increment
-- - Decrement
- Unary Negation: if x is 3, -x is -3
+ Unary PLus: if x is -3, +x is 3

/**
 * Bitwise operators - treats the operands as a set of 32 bits rather than decimal, hexadecimal, or octal numbers
 *          -Anything greater than 32 bits will be chopped
 *          -Fuck that shit
 */

/**
 * Logical Operators - typically used with boolean values; and return a boolean values
 */
&& AND 
|| OR
! NOT //!'cat' returens false
    /**
     * Short-circuit evaluation: evaluated left to right, so if the rules are guaranteed to pass or fail they stop evaluating
     */
        false && anything is short-circuit evaluated to false.
        true || anything is short-circuit evaluated to true.

    var x = 1;
    function xis2(){x=2;return true;}
    if(true || xis2()){
        x=2;
    }
    console.log(x);//1

/**
 * @String Operators: The + operator can be used on strings to concat them
 */

console.log ('a'+ ' cat');//returns a cat

/**
 * @Ternary operator: takes three operands, and takes one value based on a coditon
 *  condition ? val1 : val2
 *      -if condition is true val1, else val2
 */

    var adult  = (age >= 18) ? 'adult' : 'miner';

/**
 * @Comma operator: evals both of its operand and returns the value of last oeperand
 */

    for (var i = 0, j = 9; i <= j; i++, j--)
    console.log('a[' + i + '][' + j + ']= ' + a[i][j]);

/**
 * Unary Operators: An opeation with only one operand
 */

    /**
     * @Delete - deletes an object, obj's property, element in an array's positon
     *  - can't delete if declared with var
     *  - deleting an array element doesn't affect array's length. replaces array element with an undefined
     */

        delete objectName;
        delete objectName.property;
        delete objectName[index];
        delete property; // legal only within a with statement

        var a = [1,2,3,4]
        delete a[2]; //returns true
        console.log(a); //[1, 2, undefined Ã— 1, 4]

        x = 42;
        var y = 43;
        myobj = new Number();
        myobj.h = 4;    // create property h
        delete x;       // returns true (can delete if declared implicitly)
        delete y;       // returns false (cannot delete if declared with var)
        delete Math.PI; // returns false (cannot delete predefined properties)
        delete myobj.h; // returns true (can delete user-defined properties)
        delete myobj;   // returns true (can delete if declared implicitly)


    /**
     * typeof operator - returns type
     */
        var myFun = new Function('5 + 2');
        var shape = 'round';
        var size = 1;
        var foo = ['Apple', 'Mango', 'Orange'];
        var today = new Date();
        The typeof operator returns the following results for these variables:

        typeof myFun;       // returns "function"
        typeof shape;       // returns "string"
        typeof size;        // returns "number"
        typeof foo;         // returns "object"
        typeof today;       // returns "object"
        typeof doesntExist; // returns "undefined"

        typeof null; // returns "object"
        typeof document.lastModified; // returns "string"
        typeof window.length;         // returns "number"


    /**
     * @Void operator - specifies an expression to be evaluated without returning a value
     *  void (expression)
     *  void expression
     *  -Can use the void operator to specify an expression in an a href=""
     */

        <a href="javascript:void(0)">Click here to do nothing</a>
        <a href="javascript:void(document.form.submit())">
        Click here to submit</a>


/**
 * @Relation operators - Compares its operands and returns a Boolean based on wether the comparision is true
 */

    /**
     * @in - returns true if the property is in the specified object
     */
    // Arrays
        var trees = ['redwood', 'bay', 'cedar', 'oak', 'maple'];
        0 in trees;        // returns true
        3 in trees;        // returns true
        6 in trees;        // returns false
        'bay' in trees;    // returns false (you must specify the index number,
                        // not the value at that index)
        'length' in trees; // returns true (length is an Array property)

        // built-in objects
        'PI' in Math;          // returns true
        var myString = new String('coral');
        'length' in myString;  // returns true

        // Custom objects
        var mycar = { make: 'Honda', model: 'Accord', year: 1998 };
        'make' in mycar;  // returns true
        'model' in mycar; // returns true

    /**
     * @Instanceof - returns true if the object is a of the type
     *      objectName instanceof objectType
     */
        var theDay = new Date(1995, 12, 17);
        if (theDay instanceof Date) {
            // statements to execute
        }
    
/**
 * Operator presedence
 */

member                      . []
call/create instance        () new 
negation/increment          ! ~ - ++ -- typeof void delete
multply/divide              * / %
bitwise shift	<< >> >>>
relational	< <= > >= in instanceof
equality	== != === !==
bitwise-and	&
bitwise-xor	^
bitwise-or	|
logical-and	&&
logical-or	||
conditional	?:
assignment	= += -= *= /= %= <<= >>= >>>= &= ^= |=
comma	,

/**
 * @Expressions - Any valid unit of code that resolves to a value
 *      -two types
 *          -with side effects: those that assign a value to a variables
 *             -those that evaluate and therefore resolve
 */
    //Assign: 
    x = 7;
    //Those that evaluate to a value and resolve 
    3 +5
    /**
     * Expression Categories:  
     *  Arithmatic - evAluates to a number
     *  String: evaluates to a char string
     *  Logical: eval to true or false
     *  Primary: basic keywords and general expressons n js
     *  Left-hand-side expressions: left values are the destination of an assignment
     */

     /**
      * @Primary Expressions: basic keywords and general expressions in js
      */
            //this -used to refer to the current Object
            //generally to the calling obj in a method
            this
            this['property']
            this.property
            ele.onChange= validate(this, 18, 99);

            /**
             * Grouping operator - () - Controls precedence of evaluation in expressions
             * PEMDAS
             */

            /**
             * @Left-hand-side expression - left values the destination of assingment
             *  new - can use the new operator to create a new instance of a user-defined object type, or built in 
             */
                var objectName = new objectType([param1, param2, ..., paramN]);

            /**
             * @super -used to call functions on the obj's parent
             */
            super([arguments]); // calls the parent constructor.
            super.functionOnParent([arguments]);

            /**
             * @Spread operator - ... - allows an expression to be expanded in places where multiple arguments(func) or elements(array literals) expected 
             */
            var parts = ['shoulder', 'knees'];
            var lyrics = ['head', ...parts, 'and', 'toes'];

            function f(x, y, z) { }
            var args = [0, 1, 2];
            f(...args);
