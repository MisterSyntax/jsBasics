Declarations:
    var - declares a variable, optionally initializing it to a value
        - all var statements in a function should be placed as near to the top of the function as possible
    let - declares a block scope local variable, optionally initializing it to a value.
        - I only want to use the var right here (e.g. a for loop)
        - let does not hoist
    const - Declares a read-only named constant; Must have an initial value


Evaluating Variables. 
    - Declared variables with no var or let are set to undefined
    - An attempt to access an undeclared variable will result in a ReferenceError
        - if "var x;" then "x === undefined" is true

Variable scope:
    - hoisting: Refering to a variable declared later.
        -hoisted variables are undefined until they pass their initial Declarations
            e.g.
            console.log(x);//returns undefined
            var x = 1;
            console.log(x);//returns 1
        -let vars do not hoist 
            e.g.
            console.log(x);//ReferenceError
            let x = 1;

Undefined:
    - undefined acts as false in boolean context
    - undefined is NaN in numerical context

Null
    - null is false in boolean
    - null is 0 in numerical context

Global Variables:
    - properties of the global Object   
    - in web pages window is the global object
    - you can access global variables declared in one window or frame from another window or frame by specifying the window or frame name

Constants: const
    - read only
    - can't be re-declared
    - has to be initialized to a value
    - same scope as let. block scoped
    -cannot declare a constant with the same name as a function or variable within the same scope
    - constants can be objects
    - properties of constants are not protected and can be overwritten
Function declaration:
    function foo() {...}
Function expression:
    var baz = function(){...}

Data Structures and types:
    Primitives:
        -boolean
        -null 
            -case sensitive !=Null
        -undefined
        -Number
        -String
        -Symbol
    Object

Data type conversion:
    - You don't have to specify the type of a variable when you declare it
    - Data types are automatically converted as needed
        e.g. var x = 42; x ="hi";//is valid 
    - expressions with a string and + automatically concat vals and string
        e.g. var x = 10 + 'hi'; //x = "10hi";
    -if other operator, works as numerical  
        e.g. '37'-7 //30
        e.g. 'cat - 7 //NaN

Converting strings to numbers
    parseInt(string, radix) - only returns whole numbers; radix is base(between 2 and 36)
        parseInt('10.5',10)//10
        parseInt('10',10)//10
        parseInt('10',2)//2
    parseFloat(string) - returns a floating point number
        parseFloat('FF2');//NaN
        parseFloat('3.14');//3.14
    (unary plus) or (+ '<stirng>') - retrieves a number from a string
        -parenthesis for clarity not required
        e.g.
        '1.1' + '1.1' = '1.11.1'
        (+'1.1') + (+'1.1') = 2.2   

Literals - used to represent values in your script
    -fixed values you literally provide in your script
    -Array Literals
    -Boolean Literals
    -Floating Point Literals
    -Integers
    -Object Literals
    -RegExp Literals
    -String Literals

    Array literals - a list of zero or more expressons, each an array element, enclosed in []
        - initialized with specified values as elements
        - length is the number of args specified
        - can have undefined elements
            var fish =['Lion', , 'Angel']; //fish[1] is undefined; fsh length = 3
            but you should write as fish =['Lion', undefined, 'Angel']
        - 0 indexed
        -trailing commas ignored 
            var fish =['Lion', , 'Angel', ] //fish length = 3

    Boolean literals - Either true or flase
        -boolean object is a wraper around the boolean primitive
        -Boolean object eg:
            -var foo = Boolean(bar); //equals foo = !!bar;
                - foo.baz = 1;//foo.baz returns undefined
            -var foo = new Boolean(bar); // equals var foo Object(Boolean);
                -foo.baz = 1; // foo.baz returns 1
    
    Integers - Can be expressed in decimal(base 10), hexadecimal(b16), octal(b8), binary(b2)
        -Decimal - no leading 0, eg. 0, 1, 10, -300
        -Octal - leading 0. eg. 015, 0001, -0o77
        -Hexdecimal- leading 0x e.g 0x00111, -0xF1A7
        -binary - 0b. e.g. 0b0011, -0b11

    Floating point lterals
        - Decimal integer that can be singed + or -
        - A decimal point
        - A fraction
        - An exponent 
        3.1415926
        -.123456789
        -3.1E+12
        .1e-23

    Object Literals-
        - List of zero or more pairs of proprietary names and associated values of an object within {}
        e.g.
            {
                a:1,
                b:"cat",
                c:{a:1,b:2},
                f: myFunc('param')
            }

        - property names can be a numeric or string literals (including empty string '')
        - propert names have to be identifiers (alphanumeric chars and $ or _ and can't start with a digit)
            - prop names can be accessed through . notation or array if identifiers
            - otherwise they'd have to be enclosed in '' e.g. {'!':1,'?':2}
            - and can only be accessed with [] notation
        - values can be literals or functions
        e.g.
            var foo = {a: 'alpha', 2: 'two'};
            console.log(foo.a);    // alpha
            console.log(foo[2]);   // two
            //console.log(foo.2);  // Error: missing ) after argument list
            //console.log(foo[a]); // Error: a is not defined
            console.log(foo['a']); // alpha
            console.log(foo['2']); // two



//TODO: RegExp literals
